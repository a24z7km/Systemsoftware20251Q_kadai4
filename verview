# 概要

共同開発のツールとして、GitHub、GitHub actionsを利用したファイル共有とテストを行う。

開発するシェルスクリプトと、その動作を確認するテスト用シェルスクリプトを作成し、授業用サーバに保存し、GitHubと紐付ける。テスト用シェルスクリプトをGitHub actionsで動かすよう設定ファイルを作成する。

今回作るシェルスクリプトは最大公約数を計算するシェルスクリプトとする。

### 手順

1. GitHubのアカウントを作成する　✅
2. 授業用サーバ（202.209.203.153）の"~/kadai4"をGitHubのPublicリポジトリと連携状態にする
3. "~/kadai4"内に以下のファイルを準備する	学籍番号、GitHubのURLを記入したREADMEファイル	最大公約数を計算するシェルスクリプト	シェルスクリプトの動作確認をするテスト用シェルスクリプト
4. GitHub actionsで設定を行い、テスト用シェルスクリプトを動かす

1. 1. GitHubのアカウントを作成する
2. 2. 授業用サーバ（202.209.203.153）の"~/kadai4"をGitHubのPublicリポジトリと連携状態にする
3. 3. "~/kadai4"内に以下のファイルを準備する	学籍番号、GitHubのURLを記入したREADMEファイル	最大公約数を計算するシェルスクリプト	シェルスクリプトの動作確認をするテスト用シェルスクリプト
4. 4. GitHub actionsで設定を行い、テスト用シェルスクリプトを動かす

**最大公約数シェルスクリプト**

- 2つの自然数を引数とし、1つの自然数の最大公約数を出力とする
- その他、正しくない入力を行った際はエラー終了する

**テスト用シェルスクリプト**

- 実行すると最大公約数シェルスクリプトへさまざまな入力を行う
- 最大公約数シェルスクリプトが想定した挙動をしていない場合にエラー終了を行う

例

2と4を入力する && 2を出力したら成功 || 出力しなかったらエラー

3を入力する || エラーメッセージが出なかったらエラー

文字を入力する || エラーメッセージが出なかったらエラー

など

### 提出方法

授業用サーバの各自のホームディレクトリにkadai4ディレクトリを作成し、GitHubのローカルリポジトリにする。

（202.209.203.153:~/kadai4）

### 提出期限

6月7日（水）~16:15

# 備考

### 評価項目

・最大公約数シェルスクリプト

正しい入出力チェック

数値演算

・テスト用シェルスクリプト

正しい入出力チェックの動作確認

最大公約数の動作確認

・ファイル

READMEファイル

授業用サーバとGitHubの連携

GitHub Actionによるテストの自動化

### ヒント

1. 開発環境を先に準備する

GitHubのアカウント、~/kadai4との連携、READMEファイル、ationsの設定などを先に作ろう。

2. やってほしい動作を考えながらテスト用シェルスクリプトを作る

ユーザが正しく使った場合の動作はもちろん、想定外の動作をしたらどう返すか考えながら作ろう。

例：引数が多い・少ない、負の数、小数、極度に大きい数、などなど…

エラーに繋がりそうなパターンを多く網羅し、その時の動作を決めよう。

3. 正常終了とエラー終了を使い分ける

GitHub actionsではエラー終了をキャッチして通知を行います。

エラー時は標準エラー出力へのメッセージやエラー終了するよう心がけましょう。
